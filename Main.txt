#include <iostream>
#include <string>
#include <algorithm>
#include <Windows.h>
#include <vector>
#include <math.h>

using namespace std;
string alp = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";

string RemoveSpacesAndSpecialChars(const string& input)
{
	string result;
	for (char ch : input)
	{
		// Проверяем, является ли символ буквой или цифрой
		if (isalnum(static_cast<unsigned char>(ch)))
		{
			result += ch; // Добавляем символ в результат, если он буква или цифра
		}
	}
	return result;
}

//строим нужный нам ключ
string BuildingKey(string text, string key)
{
	string temp = key;
	if (key.size() >= text.size())
		return key;
	else
	{
		int size = text.size() - key.size();
		int ksize = key.size();
		while (size >= ksize)
		{
			key += temp;
			size -= ksize;
		}
		key += key.substr(0, size);//дополняем оставшиеся символы
		return key;
	}
}


//их можно переделать и под русский алфавит заменив 26 на 32, букву а на а(рус) и установить кодировку 1251
//но и даже тогда при кодировании есть ошибки, из-за самих числовых кодов букв (ё)
string CodeEnglishLanguage(string text, string key)
{
	string temp = "";
	//просто считем по формуле
	for (int i = 0; i < text.size(); i++)
	{
		temp += ((text[i] - 'a' + key[i] - 'a') % 26) + 'a';
	}
	return temp;
}

string DecodeEnglishLanguage(string text, string key)
{
	string temp = "";
	for (int i = 0; i < text.size(); i++)
	{
		temp += (((text[i] - key[i] + 26) + 26) % 26) + 'a';
	}
	return temp;
}

string CodeRussianLanguage(string text, string key)
{
	vector <int> vectorText;//текст
	vectorText.resize(text.size());
	vector <int> vectorKey;//ключ
	vectorKey.resize(text.size());
	//простым перебором ищем нужные буквы, как для текста так и для ключа
	for (int i = 0; i < text.size(); i++)
	{
		for (int j = 0; j < 33; j++)
		{
			if (text[i] == alp[j])
			{
				vectorText[i] = j;
			}
			if (key[i] == alp[j])
			{
				vectorKey[i] = j;
			}
		}
	}
	int pos = 0;//позиция в алфавите
	//считаем по формуле
	for (int i = 0; i < text.size(); i++)
	{
		pos = ((vectorText[i] + vectorKey[i]) % 33);
		text[i] = alp[pos];
	}
	return text;
}

string DecodeRussianLanguage(string text, string key)
{
	vector <int> vectorText;
	vectorText.resize(text.size());
	vector <int> vectorKey;
	vectorKey.resize(text.size());
	for (int i = 0; i < text.size(); i++)
	{
		for (int j = 0; j < 33; j++)
		{
			if (text[i] == alp[j])
			{
				vectorText[i] = j;
			}
			if (key[i] == alp[j])
			{
				vectorKey[i] = j;
			}
		}
	}
	int pos = 0;
	for (int i = 0; i < text.size(); i++)
	{
		pos = ((vectorText[i] - vectorKey[i] + 33) % 33);
		text[i] = alp[pos];
	}
	return text;
}

int FindKeyLength(vector <string> textMatrix)
{
	vector < pair < int, int > > duplicate;//массив с кол-вом повторяющихся элементов и их позицией 
	int j, z;
	vector <int> freq;//массив частоты
	int tempLength = 1;
	//ищем равные элементы,считая кол-во, сравнивая в построенном ранее массиве (где последний элемент это один первый)
	//и прохождение всего текса начиная с конца, число иттераций кол-во символов в построенном массиве
	for (int i = 1; i < textMatrix.size(); i++)
	{
		int count = 0;//счетчик для равных элементов
		//идем по построеному массиву строк, просмотр строки начинаем с конца 
		//z это весь текст без последнего символа (его тоже начинаем с конца)
		for (j = textMatrix[i].size() - 1, z = textMatrix[0].size() - 1; j >= 0; j--, z--)
		{
			if (textMatrix[i][j] == textMatrix[0][z])
			{
				count++;
			}
		}
		if (count >= textMatrix.size() / 30)//когда совпадений больше 3%
		{
			duplicate.push_back(make_pair(count, i - 1));//2 число это позиция в построенном массиве
		}
	}

	freq.resize(50);//предпологаем что длина пароля не больше 50 символов
	//разница между рядом стоящими позициями из подходящго массива дает частоту "повторения"
	//те этот массив хранит все стречающиеся длины возможных паролей
	for (int i = 1; i < duplicate.size(); i++)
	{
		int t = duplicate[i].second - duplicate[i - 1].second;
		if (t < 50)
		{
			freq[t]++;
		}
	}
	//та позиция где частота достигает наиболешего значения (чаще всего встречалась) и есть вероятная длина пароля
	for (int i = 1; i < freq.size(); i++)
	{
		if (freq[i] > tempLength)
		{
			tempLength = i;
		}
	}
	return tempLength;
}

string FindKey(int keyLen, string text, string language)
{
	string key;
	vector <double>alphabet;//начальная средняя частота встречи букв по алфавиту в текстах
	int alpSize;
	int let;
	if (language == "1")//если русский
	{
		alphabet = {
			0.07998, 0.01592, 0.04533, 0.01687, 0.02977, 0.08483,
			0.0094, 0.01641, 0.07367, 0.01208, 0.03486,//без ё
			0.04343, 0.03203, 0.067, 0.10983, 0.02804, 0.04746,
			0.05473, 0.06318, 0.02615, 0.00267, 0.00966, 0.00486,
			0.0145, 0.00718, 0.00361, 0.00037, 0.01898, 0.01735,
			0.00331, 0.00639, 0.02001
		};
		let = -32;//код русской а

	}
	else
	{
		alphabet = {
			0.0817, 0.0149, 0.0278, 0.0425, 0.127, 0.0223,
			0.0202, 0.0609, 0.0697, 0.0015, 0.0077, 0.0403,
			0.0241, 0.0675, 0.0751, 0.0193, 0.001, 0.0599,
			0.0633, 0.0906, 0.0276, 0.0098, 0.0236, 0.0015,
			0.0197, 0.0007
		};
		let = 97;//код англиской а
	}
	alpSize = alphabet.size();
	for (int i = 0; i < keyLen; i++)
	{
		vector <double> freq;//частота для букв
		freq.resize(alpSize);
		vector <pair <int, double> > letters;//для хранения номера буквы (как в алфавите) и значения частоты

			vector  <string> strings;
		int k = 0;
		//делим весь текст на строки длины пароля(те в нем число столбцов=длине пароля)
		for (int z = 0; z < (text.length() / keyLen); z++)
		{
		strings.push_back(text.substr(k, keyLen));
		k += keyLen;
		}
		strings.push_back(text.substr(k, text.length()));

		//как бы выделяем в тексте строки длины пароля (по очередно пробежим по всем столбцам с помощью i)
		//те в этих строках выделяем столбцы и смотрим в столбце какие буквы встретились, ведем счетчик встречи букв в алфавите
		//ясно что позиция на которой будет больше всех счетчик вероятнее буква которая шифрует наиболее "популярные" буквы
		for (int j = i; j < text.length(); j += keyLen)
		{
			vector <pair <int, double> > letters;//для хранения номера буквы (как в алфавите) и значения частоты
			if (text[j] != 'ё')//у буквы ё у единственной код -72, у остальных же от -32 до -1, поэтому исключаем ее
			{
				freq[text[j] - let]++;
			}

		}
		//делаем как бы исходя из всего текста, те считаем среднее для текста
		//делаем похожим на исходную матрицу частоты букв
		for (int j = 0; j < alpSize; j++)
		{
			freq[j] = (freq[j] * keyLen) / text.length();
		}

		//усредняем значения частоты с помощью исходной таблицы частоты и получившейся, перебирая все возможные варианты
		for (int j = 0; j < alpSize; j++)
		{
			double temp = 0;
			int n = j;//эта переменная хранит номер позиции в матрице частоты начиная с j позиции, те начиная с этой позиции
			//будет перемножаться получившаяся частота на исходную частоту каждый раз начиная сначала (переменная z)
			for (int z = 0; z < alpSize; z++)
			{
				if (n == (alpSize))//если дошли до последнего символа то нулим
				{
					n = 0;
				}
				temp += alphabet[z] * freq[n];//перемножаем частоты (со сдвигом с помощью n)
				n++;
			}
			letters.push_back(make_pair(j, temp));
		}
		double max = letters[0].second;
		int num = 0;
		//ищем максимальную частоту, а ее номер и есть искомая (самая популярная) буква
		for (int j = 0; j < alpSize; j++)
		{
			if (max < letters[j].second)
			{
				max = letters[j].second;
				num = j;
			}
		}
		key += (num + let);//строим ключ, на каждой итерации по зашифрованной букве (let это смещение для определения буквы в алфавите)
	}

	cout << "Ключ: " << key << endl;
	return key;
}

int main()
{
	setlocale(LC_ALL, "Russian");
	int numberSelectedAction;
	string language;
	cout << "Выберите язык:" << endl;
	cout << "	1 - русский," << endl; 
	cout << "	остальное - английский" << endl;
	getline(cin, language);//сделала string, а не int, тк иначе не будет вводиться строка text (getline не хочет работать)
	string text, key;
	if (language == "1")
	{
		SetConsoleCP(1251);//устанавливаем кодировку с которой будет работать алгоритм
		SetConsoleOutputCP(1251);
		cout << "Введите текст (программа работает только с буквами): " << endl;
		getline(cin, text);
		text = RemoveSpacesAndSpecialChars(text);
		transform(text.begin(), text.end(), text.begin(), tolower);
		cout << "Текст, с которым будем работать: " << text << endl;
		cout << "Выберите что хотите сделать с текстом:" << endl;
		cout << "	0 - раскодировать не зная ключа," << endl;
		cout << "	1 - закодировать," << endl;
		cout << "	2 - раскодировать зная ключ" << endl;
		cin >> numberSelectedAction;
		if (numberSelectedAction == 0)
		{
			vector <string> textMatrix;
			textMatrix.push_back(text);
			int keyLengh;

			//делим наш текст так чтобы последний эл был 1 буквой исходного текста, второй с конца эл был первыми 2 буквами
			//те 1 элемент это вся строка без последней буквы
			for (int i = 1; i < text.length(); i++)
			{
				textMatrix.push_back(text.substr(0, text.length() - i));
			}
			keyLengh = FindKeyLength(textMatrix);
			cout << "Вероятная длина ключа = " << keyLengh << endl;
			key = FindKey(keyLengh, text, language);
			key = BuildingKey(text, key);
			text = DecodeRussianLanguage(text, key);
			cout << "Дешифрованное: " << text << endl;
		}
		if (numberSelectedAction == 1)
		{
			cout << "Введите ключ: " << endl;
			cin >> key;
			key = BuildingKey(text, key);
			text = CodeRussianLanguage(text, key);
			cout << "Зашифрованное: " << text << endl;
			cout << "Расшифровать обратно?" << endl; 
			cout << "	0 - нет," << endl;
			cout << "	1 - да" << endl;
			cin >> numberSelectedAction;
			if (numberSelectedAction == 1)
			{
				text = DecodeRussianLanguage(text, key);
				cout << "Дешифрованное: " << text << endl;
			}
		}
		else if (numberSelectedAction == 2)
		{
			cout << "Введите ключ: " << endl;
			cin >> key;
			key = BuildingKey(text, key);
			text = DecodeRussianLanguage(text, key);
			cout << "Дешифрованное: " << text << endl;
		}
	}
	else
	{
		cout << "Enter the text (the program only works with letters): " << endl;
		getline(cin, text);
		text = RemoveSpacesAndSpecialChars(text);
		transform(text.begin(), text.end(), text.begin(), tolower);
		cout << "The text that we will work with: " << text << endl;
		cout << "Choose what you want to do with the text:" << endl;
		cout << "	0 - decode without knowing the key," << endl;
		cout << "	1 - encode," << endl;
		cout << "	2 - decode knowing the key" << endl;
		cin >> numberSelectedAction;
		if (numberSelectedAction == 0)
		{
			vector <string> textMatrix;
			textMatrix.push_back(text);
			int keyLen;

			//делим наш текст так чтобы последний эл был 1 буквой исходного текста, второй с конца эл был первыми 2 буквами
			//те 1 элемент это вся строка без последней буквы
			for (int i = 1; i < text.length(); i++)
			{
				textMatrix.push_back(text.substr(0, text.length() - i));
			}
			keyLen = FindKeyLength(textMatrix);
			cout << "The probable length of the key = " << keyLen << endl;
			key = FindKey(keyLen, text, language);
			key = BuildingKey(text, key);
			text = DecodeEnglishLanguage(text, key);
			cout << "Decrypted: " << text << endl;
		}
		if (numberSelectedAction == 1)
		{
			cout << "Enter the key: " << endl;
			cin >> key;
			key = BuildingKey(text, key);
			text = CodeEnglishLanguage(text, key);
			cout << "Encrypted: " << text << endl;
			cout << "Decrypt it back?" << endl;
			cout << "	0 - no,"<< endl;
			cout << "	1 - yes" << endl;
			cin >> numberSelectedAction;
			if (numberSelectedAction == 1)
			{
				text = DecodeEnglishLanguage(text, key);
				cout << "Decrypted: " << text << endl;
			}
		}
		else if (numberSelectedAction == 2)
		{
			cout << "Enter the key: " << endl;
			cin >> key;
			key = BuildingKey(text, key);
			text = DecodeEnglishLanguage(text, key);
			cout << "Decrypted: " << text << endl;
		}
	}

	system("pause");
	return 0;
}
